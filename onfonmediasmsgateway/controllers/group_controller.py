# -*- coding: utf-8 -*-

"""
    onfonmediasmsgateway

    This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
"""

from onfonmediasmsgateway.api_helper import APIHelper
from onfonmediasmsgateway.configuration import Configuration
from onfonmediasmsgateway.controllers.base_controller import BaseController
from onfonmediasmsgateway.http.auth.custom_query_auth import CustomQueryAuth

class GROUPController(BaseController):

    """A Controller to access Endpoints in the onfonmediasmsgateway API."""


    def get_group_list(self):
        """Does a GET request to /Group.

        Get Group List

        Returns:
            mixed: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/Group'
        _query_builder = Configuration.base_uri
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json',
            'AccessKey': Configuration.access_key
        }

        # Prepare and execute request
        _request = self.http_client.get(_query_url, headers=_headers)
        CustomQueryAuth.apply(_request)
        _context = self.execute_request(_request)
        self.validate_response(_context)

        # Return appropriate type
        return APIHelper.json_deserialize(_context.response.raw_body)

    def create_new_group(self,
                         group_name):
        """Does a POST request to /Group.

        Create New Group

        Args:
            group_name (string): Name for new group

        Returns:
            mixed: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/Group'
        _query_builder = Configuration.base_uri
        _query_builder += _url_path
        _query_parameters = {
            'GroupName': group_name
        }
        _query_builder = APIHelper.append_url_with_query_parameters(_query_builder,
            _query_parameters, Configuration.array_serialization)
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json',
            'AccessKey': Configuration.access_key
        }

        # Prepare and execute request
        _request = self.http_client.post(_query_url, headers=_headers)
        CustomQueryAuth.apply(_request)
        _context = self.execute_request(_request)
        self.validate_response(_context)

        # Return appropriate type
        return APIHelper.json_deserialize(_context.response.raw_body)

    def update_group(self,
                     group_name,
                     id):
        """Does a PUT request to /Group.

        Update Group

        Args:
            group_name (string): Name for new group
            id (string): GroupID

        Returns:
            mixed: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/Group'
        _query_builder = Configuration.base_uri
        _query_builder += _url_path
        _query_parameters = {
            'id': id
        }
        _query_builder = APIHelper.append_url_with_query_parameters(_query_builder,
            _query_parameters, Configuration.array_serialization)
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json',
            'AccessKey': Configuration.access_key
        }

        # Prepare form parameters
        _form_parameters = {
            'GroupName': group_name
        }

        # Prepare and execute request
        _request = self.http_client.put(_query_url, headers=_headers, parameters=_form_parameters)
        CustomQueryAuth.apply(_request)
        _context = self.execute_request(_request)
        self.validate_response(_context)

        # Return appropriate type
        return APIHelper.json_deserialize(_context.response.raw_body)

    def create_sub_group_group(self,
                               group_name,
                               id):
        """Does a PUT request to /Group?{Id}/SubGroup.

        Create Sub-Group Group

        Args:
            group_name (string): Name for new group
            id (string): TODO: type description here. Example: 

        Returns:
            mixed: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/Group?{Id}/SubGroup'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, { 
            'Id': id
        })
        _query_builder = Configuration.base_uri
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json',
            'AccessKey': Configuration.access_key
        }

        # Prepare form parameters
        _form_parameters = {
            'GroupName': group_name
        }

        # Prepare and execute request
        _request = self.http_client.put(_query_url, headers=_headers, parameters=_form_parameters)
        CustomQueryAuth.apply(_request)
        _context = self.execute_request(_request)
        self.validate_response(_context)

        # Return appropriate type
        return APIHelper.json_deserialize(_context.response.raw_body)

    def delete_group(self,
                     id):
        """Does a DELETE request to /Group.

        Delete Group

        Args:
            id (int): TODO: type description here. Example: 

        Returns:
            mixed: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/Group'
        _query_builder = Configuration.base_uri
        _query_builder += _url_path
        _query_parameters = {
            'id': id
        }
        _query_builder = APIHelper.append_url_with_query_parameters(_query_builder,
            _query_parameters, Configuration.array_serialization)
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json',
            'AccessKey': Configuration.access_key
        }

        # Prepare and execute request
        _request = self.http_client.delete(_query_url, headers=_headers)
        CustomQueryAuth.apply(_request)
        _context = self.execute_request(_request)
        self.validate_response(_context)

        # Return appropriate type
        return APIHelper.json_deserialize(_context.response.raw_body)
