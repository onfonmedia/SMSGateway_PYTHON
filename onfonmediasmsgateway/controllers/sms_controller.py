# -*- coding: utf-8 -*-

"""
    onfonmediasmsgateway

    This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
"""

from onfonmediasmsgateway.api_helper import APIHelper
from onfonmediasmsgateway.configuration import Configuration
from onfonmediasmsgateway.controllers.base_controller import BaseController
from onfonmediasmsgateway.http.auth.custom_query_auth import CustomQueryAuth

class SMSController(BaseController):

    """A Controller to access Endpoints in the onfonmediasmsgateway API."""


    def get_sent_message_list(self,
                              enddate,
                              fromdate,
                              length,
                              start):
        """Does a GET request to /SMS.

        Get Sent Message List

        Args:
            enddate (date): Date format must be in yyyy-mm-dd
            fromdate (date): Date format must be in yyyy-mm-dd
            length (int): Ending index value to fetch the campaign detail.
            start (int): Starting index value to fetch the campaign detail.

        Returns:
            mixed: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/SMS'
        _query_builder = Configuration.base_uri
        _query_builder += _url_path
        _query_parameters = {
            'enddate': enddate,
            'fromdate': fromdate,
            'length': length,
            'start': start
        }
        _query_builder = APIHelper.append_url_with_query_parameters(_query_builder,
            _query_parameters, Configuration.array_serialization)
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json',
            'AccessKey': Configuration.access_key
        }

        # Prepare and execute request
        _request = self.http_client.get(_query_url, headers=_headers)
        CustomQueryAuth.apply(_request)
        _context = self.execute_request(_request)
        self.validate_response(_context)

        # Return appropriate type
        return APIHelper.json_deserialize(_context.response.raw_body)

    def get_sent_message_status(self,
                                message_id):
        """Does a GET request to /MessageStatus.

        Get Sent Message Status

        Args:
            message_id (int): MessageId of message

        Returns:
            mixed: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/MessageStatus'
        _query_builder = Configuration.base_uri
        _query_builder += _url_path
        _query_parameters = {
            'MessageId': message_id
        }
        _query_builder = APIHelper.append_url_with_query_parameters(_query_builder,
            _query_parameters, Configuration.array_serialization)
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json',
            'AccessKey': Configuration.access_key
        }

        # Prepare and execute request
        _request = self.http_client.get(_query_url, headers=_headers)
        CustomQueryAuth.apply(_request)
        _context = self.execute_request(_request)
        self.validate_response(_context)

        # Return appropriate type
        return APIHelper.json_deserialize(_context.response.raw_body)

    def get_create_sms(self,
                       message,
                       mobile_number,
                       sender_id,
                       co_relator=None,
                       is_flash=None,
                       is_unicode=None,
                       link_id=None,
                       group_id=None,
                       schedule_time=None,
                       service_id=None):
        """Does a GET request to /SendSMS.

        Create SMS

        Args:
            message (string): text message to send
            mobile_number (string): Use mobile number as comma sepreated to
                send message on multiple mobile number e.g. 78461230,78945612
            sender_id (string): Approved Sender Id
            co_relator (string, optional): Parameter required for using SDP
                OnDemand Service
            is_flash (bool, optional): Is_Flash is true or false for flash
                message
            is_unicode (bool, optional): Is_Unicode is true or false for
                unicode message
            link_id (string, optional): Parameter required for using SDP
                OnDemand Service
            group_id (string, optional): Valid group-id of current user (only
                for group message otherwise leave empty string)
            schedule_time (string, optional): scheduleTime Date in yyyy-MM-dd
                HH:MM (only for schedule message)
            service_id (string, optional): Parameter required for using SDP
                OnSubscription Service

        Returns:
            mixed: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/SendSMS'
        _query_builder = Configuration.base_uri
        _query_builder += _url_path
        _query_parameters = {
            'Message': message,
            'MobileNumber': mobile_number,
            'SenderId': sender_id,
            'CoRelator': co_relator,
            'Is_Flash': is_flash,
            'Is_Unicode': is_unicode,
            'LinkId': link_id,
            'groupId': group_id,
            'scheduleTime': schedule_time,
            'serviceId': service_id
        }
        _query_builder = APIHelper.append_url_with_query_parameters(_query_builder,
            _query_parameters, Configuration.array_serialization)
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json',
            'AccessKey': Configuration.access_key
        }

        # Prepare and execute request
        _request = self.http_client.get(_query_url, headers=_headers)
        CustomQueryAuth.apply(_request)
        _context = self.execute_request(_request)
        self.validate_response(_context)

        # Return appropriate type
        return APIHelper.json_deserialize(_context.response.raw_body)

    def create_sms(self,
                   message,
                   mobile_number,
                   sender_id,
                   co_relator=None,
                   is_flash=None,
                   is_unicode=None,
                   link_id=None,
                   group_id=None,
                   schedule_time=None,
                   service_id=None):
        """Does a POST request to /SendSMS.

        Create SMS

        Args:
            message (string): text message to send
            mobile_number (string): Use mobile number as comma sepreated to
                send message on multiple mobile number e.g. 78461230,78945612
            sender_id (string): Approved Sender Id
            co_relator (string, optional): Parameter required for using SDP
                OnDemand Service
            is_flash (bool, optional): Is_Flash is true or false for flash
                message
            is_unicode (bool, optional): Is_Unicode is true or false for
                unicode message
            link_id (string, optional): Parameter required for using SDP
                OnDemand Service
            group_id (string, optional): Valid group-id of current user (only
                for group message otherwise leave empty string)
            schedule_time (string, optional): scheduleTime Date in yyyy-MM-dd
                HH:MM (only for schedule message)
            service_id (string, optional): Parameter required for using SDP
                OnSubscription Service

        Returns:
            mixed: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/SendSMS'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, { 
            'Message': message,
            'MobileNumber': mobile_number,
            'SenderId': sender_id,
            'CoRelator': co_relator,
            'Is_Flash': is_flash,
            'Is_Unicode': is_unicode,
            'LinkId': link_id,
            'groupId': group_id,
            'scheduleTime': schedule_time,
            'serviceId': service_id
        })
        _query_builder = Configuration.base_uri
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json',
            'AccessKey': Configuration.access_key
        }

        # Prepare and execute request
        _request = self.http_client.post(_query_url, headers=_headers)
        CustomQueryAuth.apply(_request)
        _context = self.execute_request(_request)
        self.validate_response(_context)

        # Return appropriate type
        return APIHelper.json_deserialize(_context.response.raw_body)

    def get_create_bulk_sms(self,
                            mobile_number_message,
                            sender_id,
                            co_relator=None,
                            is_flash=None,
                            is_unicode=None,
                            link_id=None,
                            schedule_time=None,
                            service_id=None):
        """Does a GET request to /SendBulkSMS.

        Create Bulk SMS

        Args:
            mobile_number_message (string): Please ensure while submitting the
                request the message should be passed in encoded format. e.g.
                78461230^test~78945612^hello
            sender_id (string): Approved Sender Id
            co_relator (string, optional): Parameter required for using SDP
                OnDemand Service
            is_flash (bool, optional): Is_Flash is true or false for flash
                message
            is_unicode (bool, optional): Is_Unicode is true or false for
                unicode message
            link_id (string, optional): Parameter required for using SDP
                OnDemand Service
            schedule_time (date, optional): scheduleTime Date in yyyy-MM-dd
                HH:MM (only for schedule message)
            service_id (string, optional): Parameter required for using SDP
                OnSubscription Service

        Returns:
            mixed: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/SendBulkSMS'
        _query_builder = Configuration.base_uri
        _query_builder += _url_path
        _query_parameters = {
            'MobileNumber_Message': mobile_number_message,
            'SenderId': sender_id,
            'CoRelator': co_relator,
            'Is_Flash': is_flash,
            'Is_Unicode': is_unicode,
            'LinkId': link_id,
            'scheduleTime': schedule_time,
            'serviceId': service_id
        }
        _query_builder = APIHelper.append_url_with_query_parameters(_query_builder,
            _query_parameters, Configuration.array_serialization)
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json',
            'AccessKey': Configuration.access_key
        }

        # Prepare and execute request
        _request = self.http_client.get(_query_url, headers=_headers)
        CustomQueryAuth.apply(_request)
        _context = self.execute_request(_request)
        self.validate_response(_context)

        # Return appropriate type
        return APIHelper.json_deserialize(_context.response.raw_body)

    def create_bulk_sms(self,
                        message_parameters,
                        sender_id,
                        is_flash=None,
                        is_unicode=None,
                        schedule_date_time=None):
        """Does a POST request to /SendBulkSMS.

        Create Bulk SMS

        Args:
            message_parameters (list of string): TODO: type description here.
                Example: 
            sender_id (string): Approved Sender Id
            is_flash (bool, optional): Is_Flash is true or false for flash
                message
            is_unicode (bool, optional): Is_Unicode is true or false for
                unicode message
            schedule_date_time (date, optional): scheduleTime Date in
                yyyy-MM-dd HH:MM (only for schedule message)

        Returns:
            mixed: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/SendBulkSMS'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, { 
            'MessageParameters': message_parameters,
            'ScheduleDateTime': schedule_date_time
        })
        _query_builder = Configuration.base_uri
        _query_builder += _url_path
        _query_parameters = {
            'SenderId': sender_id,
            'Is_Flash': is_flash,
            'Is_Unicode': is_unicode
        }
        _query_builder = APIHelper.append_url_with_query_parameters(_query_builder,
            _query_parameters, Configuration.array_serialization)
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json',
            'AccessKey': Configuration.access_key
        }

        # Prepare and execute request
        _request = self.http_client.post(_query_url, headers=_headers)
        CustomQueryAuth.apply(_request)
        _context = self.execute_request(_request)
        self.validate_response(_context)

        # Return appropriate type
        return APIHelper.json_deserialize(_context.response.raw_body)
